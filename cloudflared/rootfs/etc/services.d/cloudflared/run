#!/usr/bin/with-contenv bashio
# ==============================================================================
# Home Assistant Add-on: Cloudflared
# Runs the Cloudfalred tunnel for HomeAssistant
# ==============================================================================
declare default_config=/tmp/config.json


# Map HomeAssistant log levels to Cloudflared
if bashio::config.exists 'log_level' ; then
    case $(bashio::config 'log_level') in
        "trace") cloudflared_log="debug";;
        "debug") cloudflared_log="debug";;
        "info") cloudflared_log="info";;
        "notice") cloudflared_log="info";;
        "warning") cloudflared_log="warn";;
        "error") cloudflared_log="error";;
        "fatal") cloudflared_log="fatal";;
    esac

    bashio::log.info "Cloudflared log level set to \"${cloudflared_log}\""
else
    cloudflared_log="info"
fi

if bashio::config.true 'quick_tunnel'; then
    bashio::log.debug "Checking if SSL is used..."
    if bashio::var.true "$(bashio::core.ssl)" ; then
        ha_service_protocol="https"
    else
        ha_service_protocol="http"
    fi
    bashio::log.info "Connecting Cloudflared Quick Tunnel..."
    exec cloudflared --no-autoupdate \
    tunnel --loglevel="${cloudflared_log}" --url "${ha_service_protocol}://homeassistant:$(bashio::core.port)"
else

    data_path="/data"
    if bashio::config.has_value 'data_folder'; then
        data_path="/$(bashio::config 'data_folder')/cloudflared"
    fi
    # Check status file which exists when custom_config exists
    if bashio::config.true "custom_config"; then
        config="${data_path}/config.yml"
    else
        config="${default_config}"
    fi
    certificate="${data_path}/cert.pem"
    tunnel_name="$(bashio::config 'tunnel_name')"

    bashio::log.info "Connecting Cloudflared Tunnel..."
    bashio::log.debug "using ${config} config file"
    
    exec cloudflared --origincert=${certificate} --no-autoupdate \
        tunnel --config=${default_config} --loglevel="${cloudflared_log}" run "${tunnel_name}"
fi
